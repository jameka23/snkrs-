// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sneakers.Data;

namespace sneakers.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190803143102_UpdateSneakerController")]
    partial class UpdateSneakerController
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("sneakers.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<double>("Rating");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000001-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2475275-ccbd-4a98-bb47-efa8b32bb4fd",
                            Email = "jameka.echols@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jameka",
                            LastName = "Echols",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMEKA.ECHOLS@GMAIL.COM",
                            NormalizedUserName = "JAMEKA.ECHOLS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDvbM3W94OvOuKg09hmLPQFPGtiNQehxzuqVAffub4DMTGhYe+Qf2TnOudvJfgYvEw==",
                            PhoneNumberConfirmed = false,
                            Rating = 0.0,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794579",
                            TwoFactorEnabled = false,
                            UserName = "jameka.echols@gmail.com"
                        });
                });

            modelBuilder.Entity("sneakers.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandType")
                        .IsRequired();

                    b.HasKey("BrandId");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandType = "Nike"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandType = "Air Jordan"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandType = "Vans"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandType = "Adidas"
                        },
                        new
                        {
                            BrandId = 5,
                            BrandType = "New Balance"
                        },
                        new
                        {
                            BrandId = 6,
                            BrandType = "Asics"
                        },
                        new
                        {
                            BrandId = 7,
                            BrandType = "Reebok"
                        },
                        new
                        {
                            BrandId = 8,
                            BrandType = "Puma"
                        },
                        new
                        {
                            BrandId = 9,
                            BrandType = "Fila"
                        },
                        new
                        {
                            BrandId = 10,
                            BrandType = "Converse"
                        },
                        new
                        {
                            BrandId = 11,
                            BrandType = "Saucony"
                        });
                });

            modelBuilder.Entity("sneakers.Models.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConditionType")
                        .IsRequired();

                    b.HasKey("ConditionId");

                    b.ToTable("Condition");

                    b.HasData(
                        new
                        {
                            ConditionId = 1,
                            ConditionType = "Never Worn"
                        },
                        new
                        {
                            ConditionId = 2,
                            ConditionType = "Barely Worn"
                        },
                        new
                        {
                            ConditionId = 3,
                            ConditionType = "Fair"
                        },
                        new
                        {
                            ConditionId = 4,
                            ConditionType = "Slightly Damaged"
                        });
                });

            modelBuilder.Entity("sneakers.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Msg")
                        .IsRequired();

                    b.Property<string>("ReceiverId")
                        .IsRequired();

                    b.Property<string>("SenderId")
                        .IsRequired();

                    b.Property<int>("SneakerId");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SneakerId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("sneakers.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Rating");

                    b.Property<string>("ReviewMessage")
                        .IsRequired();

                    b.Property<string>("ReviewerName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("sneakers.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ShoeSize")
                        .IsRequired();

                    b.HasKey("SizeId");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            ShoeSize = "15M"
                        },
                        new
                        {
                            SizeId = 2,
                            ShoeSize = "14.5M"
                        },
                        new
                        {
                            SizeId = 3,
                            ShoeSize = "14M"
                        },
                        new
                        {
                            SizeId = 4,
                            ShoeSize = "13.5M"
                        },
                        new
                        {
                            SizeId = 5,
                            ShoeSize = "13M"
                        },
                        new
                        {
                            SizeId = 6,
                            ShoeSize = "12.5M"
                        },
                        new
                        {
                            SizeId = 7,
                            ShoeSize = "12M"
                        },
                        new
                        {
                            SizeId = 8,
                            ShoeSize = "11.5M"
                        },
                        new
                        {
                            SizeId = 9,
                            ShoeSize = "11M"
                        },
                        new
                        {
                            SizeId = 10,
                            ShoeSize = "10.5M"
                        },
                        new
                        {
                            SizeId = 11,
                            ShoeSize = "10M"
                        },
                        new
                        {
                            SizeId = 12,
                            ShoeSize = "9.5M"
                        },
                        new
                        {
                            SizeId = 13,
                            ShoeSize = "9M"
                        },
                        new
                        {
                            SizeId = 14,
                            ShoeSize = "8.5M"
                        },
                        new
                        {
                            SizeId = 15,
                            ShoeSize = "8M"
                        },
                        new
                        {
                            SizeId = 16,
                            ShoeSize = "7.5M"
                        },
                        new
                        {
                            SizeId = 17,
                            ShoeSize = "7M"
                        },
                        new
                        {
                            SizeId = 18,
                            ShoeSize = "6.5M"
                        },
                        new
                        {
                            SizeId = 19,
                            ShoeSize = "6M"
                        },
                        new
                        {
                            SizeId = 20,
                            ShoeSize = "6W"
                        },
                        new
                        {
                            SizeId = 21,
                            ShoeSize = "6.5W"
                        },
                        new
                        {
                            SizeId = 22,
                            ShoeSize = "7W"
                        },
                        new
                        {
                            SizeId = 23,
                            ShoeSize = "7.5W"
                        },
                        new
                        {
                            SizeId = 24,
                            ShoeSize = "8W"
                        },
                        new
                        {
                            SizeId = 25,
                            ShoeSize = "8.5W"
                        },
                        new
                        {
                            SizeId = 26,
                            ShoeSize = "9W"
                        },
                        new
                        {
                            SizeId = 27,
                            ShoeSize = "9.5W"
                        },
                        new
                        {
                            SizeId = 28,
                            ShoeSize = "10W"
                        },
                        new
                        {
                            SizeId = 29,
                            ShoeSize = "10.5W"
                        },
                        new
                        {
                            SizeId = 30,
                            ShoeSize = "11W"
                        });
                });

            modelBuilder.Entity("sneakers.Models.Sneaker", b =>
                {
                    b.Property<int>("SneakerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("ConditionId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ImgPath");

                    b.Property<bool>("IsSold");

                    b.Property<double>("Price");

                    b.Property<int>("SizeId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SneakerId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("SizeId");

                    b.HasIndex("UserId");

                    b.ToTable("Sneaker");

                    b.HasData(
                        new
                        {
                            SneakerId = 1,
                            BrandId = 2,
                            ConditionId = 2,
                            Description = "barely used retro 1s, shadow colorway",
                            IsSold = false,
                            Price = 215.0,
                            SizeId = 19,
                            Title = "Air Jordan Retro 1 Shadow",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sneakers.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sneakers.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sneakers.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sneakers.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("sneakers.Models.Message", b =>
                {
                    b.HasOne("sneakers.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sneakers.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sneakers.Models.Sneaker", "Sneaker")
                        .WithMany("Messages")
                        .HasForeignKey("SneakerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("sneakers.Models.Review", b =>
                {
                    b.HasOne("sneakers.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("sneakers.Models.Sneaker", b =>
                {
                    b.HasOne("sneakers.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sneakers.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sneakers.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sneakers.Models.ApplicationUser", "User")
                        .WithMany("Sneakers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
